// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider            = "prisma-dbml-generator"
  outputName          = "dbml.dbml"
  projectName         = "Database Entity Relationship Diagram for Money Management and Budgeting API"
  projectDatabaseType = "PostgreSQL"
  projectNote         = "Entity relationship diagram for database visualization"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User schema
// Should contain information about the user and their accounts

model User {
  id       String    @id @unique @default(uuid()) @db.Uuid
  email    String    @unique
  name     String    @db.VarChar(32)
  password String    @db.VarChar()
  // accounts array to create one to many relationship between owner and accounts
  accounts Account[]
  session  Session?
  // session array to create one to many relationship between owner and sessions
}

model Session {
  id      String @id @unique @default(uuid()) @db.Uuid
  user    User   @relation(fields: [user_id], references: [id])
  user_id String @unique @db.Uuid
}

// Account schema
// Should contain information about the account and its transactions

model Account {
  id                String        @id @unique @default(uuid()) @db.Uuid
  balance           Float
  // to ensure many to many relationship between two account that made a transaction
  payer_transaction Transaction[] @relation("payerTransaction")
  payer_payment     Payment[]     @relation("payerPayment")
  reciever          Transaction[] @relation("recieverTransaction")
  // owner id to create one to many relationship between owner and accounts
  owner_id          String        @db.Uuid
  owner             User          @relation(fields: [owner_id], references: [id])
}

// Platform Schema
// Should contain information about some platforms that the user might've use 

model Platform {
  id          String    @id @unique @default(uuid()) @db.Uuid
  name        String
  link        String
  description String?
  service     Service[]
  accountId   String    @db.Uuid
}

// Service Schema
// Should contain information about the service that the platform provides including the name, a description and it's price

model Service {
  id          String    @id @unique @default(uuid()) @db.Uuid
  name        String
  description String?
  price       Float
  payment     Payment[] @relation("recieverPayment")
  platform_id String    @db.Uuid()
  platform    Platform  @relation(fields: [platform_id], references: [id])
}

// Transaction Schema
// Provides a schema for transactions that are done between two users or a user and a platform

model Transaction {
  // to ensure many to many relationship between account and transaction
  id                      String  @id @unique @default(uuid()) @db.Uuid
  payment                 Float
  payer_transaction       Account @relation(name: "payerTransaction", fields: [payer_transaction_id], references: [id])
  payer_transaction_id    String  @db.Uuid
  reciever_transaction_id String  @db.Uuid
  reciever_transaction    Account @relation(name: "recieverTransaction", fields: [reciever_transaction_id], references: [id])
}

model Payment {
  id                  String  @id @unique @default(uuid()) @db.Uuid
  payment             Float
  payer_payment       Account @relation(name: "payerPayment", fields: [payer_payment_id], references: [id])
  payer_payment_id    String  @db.Uuid
  reciever_payment_id String  @db.Uuid
  reciever_payment    Service @relation(name: "recieverPayment", fields: [reciever_payment_id], references: [id])
}
